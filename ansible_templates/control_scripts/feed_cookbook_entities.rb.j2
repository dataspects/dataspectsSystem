require 'dataspects'

module Dataspects

  class Entity
    def hasEntityType
      #FIXME! This must be "automated" with regard to entitization
      @resource.sRandomValueForSMWPROPERTYNAME('HasEntityType')
    end
  end

  class CookbookFALnetFeeder < Feeder

    def initialize(dataspects_api_url:, dataspects_api_key:)
      super
    end

    def execute()

      dds = DocumentStore.new(
        dataspects_api_url: @dataspects_api_url,
        dataspects_api_key: @dataspects_api_key
      )
      rb = dds.get_response_body(endPoint: "/mediawikis?namespace=http://cookbookfindandlearnnet/wiki")
      mediawiki_id = rb[0]['_id']
      ##########################################################

      mw = Dataspects::MediaWiki.new(
        url: "https://cookbook.findandlearn.net/w",
        user: "roapi",
        password: "27i34w22f",
        log_in: :must_log_in
      )

      # ENTITIES
      # [[ProvidesCustomizationPossibilityFor::ResourceSilo level]]
      mw.originatedFromResourceSiloLabel = "DEMO::FindAndLearn::Cookbook"
      mw.originatedFromResourceSiloID = "cookbookfindandlearnnet"
      # Specify a facet of MediaWiki's resources and iterate through resources
      mw.resources_from_CATEGORIES(["Entity", "EntityType"]) do |re|
      # mw.resources_from_ASK_QUERY("[[C190110142823]]") do |re|
        # Iterate through a resource's entities
        re.entities.each do |entity|
          post(
            url: @dataspects_api_url+"/mediawikis/#{mediawiki_id}/pages",
            body: entity.mongodoc
          )
          $logger.info("#{entity.hasEntityURL} fed...")
        end
      end

      # PROPERTIES
      mw.resources_from_NAMESPACE("Property") do |re|
        response = mw.oAPI.action(:ask,
          query: "[[Property:#{re.hasResourceName}]]|?Has type|?HasPredicateClass",
          token_type: false
        )
        response.data['query']['results'].each do |pagename, page_data|
          mongodoc = {
            "predicate": re.hasResourceName,
            "predicate_type": page_data['printouts']['Has type'][0],
            "predicate_class": page_data['printouts']['HasPredicateClass'][0],
            "predicate_namespace": page_data['fullurl'].chomp("Property:#{re.hasResourceName}")
          }
          post(
            url: @dataspects_api_url+"/predicates",
            body: mongodoc
          )
        end
      end
    end

  end
end

mwpsf = Dataspects::CookbookFALnetFeeder.new(
  dataspects_api_url: "http://localhost:3000/api",
  dataspects_api_key: "aslkdjasldkjlaskdj"
).execute
