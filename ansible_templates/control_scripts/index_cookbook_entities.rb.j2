require 'dataspects'

module Dataspects

  class CookbookFALnetIndexer < Indexer

    def initialize(dataspects_api_url:, dataspects_api_key:, es_url:, tika_url:)
      super
      @dds = DocumentStore.new(
        dataspects_api_url: @dataspects_api_url,
        dataspects_api_key: @dataspects_api_key
      )
      @index = 'dataspectspublic'
      if(@esc.client.indices.exists?(index: @index))
        @esc.client.indices.delete(index: @index)
      end
      @esc.client.indices.create(index: @index)
      @esc.client.indices.close(index: @index)
      @esc.client.indices.put_settings(
        index: @index,
        body: JSON.parse(File.read(
          'elasticsearch/standard_index_settings.json'))
      )
      @esc.client.indices.put_mapping(
        index: @index,
        type: 'doc',
        body: JSON.parse(File.read(
          'elasticsearch/standard_index_mapping.json'))
      )
      @esc.client.indices.open(index: @index)
    end

    def execute()
      # You need to create a api/mediawikis and puts its MongoDB ObjectID
      # here:
      ##########################################################
      ##########################################################
      rb = @dds.get_response_body(endPoint: "/mediawikis?namespace=http://cookbookfindandlearnnet/wiki")
      mediawiki_id = rb[0]['_id']
      ##########################################################
      ##########################################################
      @dds.get_tikaHashes(endPoint: "/mediawikis/#{mediawiki_id}/pages").each do |tikaHash|
        esdoc = {
          # Resource silo level
          OriginatedFromResourceSiloID: "",
          OriginatedFromResourceSiloLabel: "",
          OriginatedFromResourceSiloType: "",
          # Resource level
          OriginatedFromResourceName: tikaHash['pagename'],
          OriginatedFromResourceURL: "",
          OriginatedFromResourceType: "",
          # Entity/subject level
          HasEntityClass: tikaHash['hasEntityClass'],
          HasEntityName: tikaHash['hasEntityName'],
          HasEntityType: tikaHash['hasEntityType'],
          HasEntityURL: tikaHash['hasEntityURL'],
          HasEntityTitle: tikaHash['hasEntityTitle'],
          HasEntityBlurbTEXT: tikaHash['hasEntityBlurbTEXT'],
          HasEntityBlurbHTML: tikaHash['hasEntityBlurbHTML'],
          HasEntityContentTEXT: "",
          HasEntityContentHTML: tikaHash['nonFormssemanticizedWikitextHtml'],
          HasEntityTypeAndEntityTitle: "#{tikaHash['hasEntityType']} \"#{tikaHash['hasEntityTitle']}\"",
          HasEntityKeywords: tikaHash['hasEntityKeywords'],
          HasEntityAnnotations: tikaHash['annotations']
        }

        # EVERYTHING to Elasticsearch
        @esc.index(
          body: esdoc,
          index: @index
        )

        # ANNOTATIONS as Annotations to MongoDB
        tikaHash['annotations'].each do |annotation|
          # annotation = {
          #           "_id" => "5c8f6eb5500c843c92dcf0e7",
          #            "id" => "subob",
          #       "subject" => "C0174167973",
          #     "predicate" => "ConcernsAspect",
          #        "object" => "Curation#"
          # }

        # This could be an Entity or an EntityType!
          temp = annotation['subject'].split('#0##') #FIXME: Lex: check for SMW subobject anonymous id!
          subject_page = get(
            url: @dataspects_api_url+"/mediawikis/pages/"+temp[0]
          )
          predicate = get(
            url: @dataspects_api_url+"/predicates/"+annotation['predicate']
          )
          #FIXME
          if(predicate["predicate_type"] == "http://semantic-mediawiki.org/swivt/1.0#_txt")
            object_page = {
              "hasEntityType" => "literal"
            }
          else
            object_page = get(
              url: @dataspects_api_url+"/mediawikis/pages/"+annotation['object']
            )
          end

          ######################################################################
          ######################################################################
          ######################################################################
          # About SearchContexts
          # --------------------
          # When SearchContext is "Support", then only consider annotations whose subject_type or object_type have [[BelongsToSearchContext::Support]]

          # We assume subject_page is an Entity!
          subject_type_belongs_to_search_context = nil
          subjectType = subject_tikaHash['hasEntityType']
          if(subject_tikaHash['hasEntityType'].nil?)
            # But subject_page can be an EntityType!
            subject_type = get(
              url: @dataspects_api_url+"/mediawikis/pages/"+subject_tikaHash['pagename']
            )
            unless(subject_type['annotations'].empty?)
              #ASKCRAIG: Optimal retrieval approach?
              subject_type['annotations'].each do |annotation|
                if(annotation['predicate'] == "BelongsToSearchContext")
                  #TODO: These can be multiple!
                  subject_type_belongs_to_search_context = annotation['object']
                  subjectType = "EntityType"
                end
              end
            end
          end
          ######################################################################
          object_type_belongs_to_search_context = nil
          objectType = object_tikaHash['hasEntityType']
          if(object_tikaHash['hasEntityType'].nil?)
            object_type = get(
              url: @dataspects_api_url+"/mediawikis/pages/"+object_tikaHash['pagename']
            )
            unless(object_type['annotations'].empty?)
              object_type['annotations'].each do |annotation|
                if(annotation['predicate'] == "BelongsToSearchContext")
                  object_type_belongs_to_search_context = annotation['object']
                  objectType = "EntityType"
                end
              end
            end
          end
          ######################################################################
          ######################################################################
          ######################################################################

          mongodoc = {
            id: "test",
            subject: annotation['subject'],
            subject_namespace: tikaHash['mediaWiki']['namespace'],
            subject_class: "Entity|Subject", #
            subject_type: subjectType, #"Diagram|RubyGem" If annotation['subject'] exists in models:pagename then set to its hasEntityType
            subject_type_belongs_to_search_context: subject_type_belongs_to_search_context,
            predicate: annotation['predicate'],
            predicate_namespace: predicate['predicate_namespace'],
            predicate_class: predicate['predicate_class'], #"Property|ActiveAction|PassiveAction"
            predicate_type: predicate['predicate_type'], #"Text|Page|URL"
            object: annotation['object'],
            object_namespace: "literal", # If annotation['object'] exists in models:pagename then set to resource['mediaWiki']['namespace']
            object_class: "Entity|Subject|literal",
            object_type: objectType, #"Diagram|RubyGem|literal" If annotation['object'] exists in models:pagename then set to its hasEntityType
            object_type_belongs_to_search_context: object_type_belongs_to_search_context,
            context: "test"
          }
          post(
            url: @dataspects_api_url+"/annotations",
            body: mongodoc.to_json
          )
        end
      end
    end

  end
end

mwsi = Dataspects::CookbookFALnetIndexer.new(
  dataspects_api_url: "http://localhost:3000/api",
  dataspects_api_key: "aslkdjasldkjlaskdj",
  tika_url: "http://localhost:9998",
  es_url: "http://localhost:9200"
).execute
