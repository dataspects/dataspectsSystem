require 'dataspects'
require 'awesome_print'

module Dataspects

  class CookbookFALnetIndexer < Indexer

    def initialize(dataspects_api_url:, dataspects_api_key:, es_url:, tika_url:)
      super
      index = 'dataspectspublic'
      if(@esc.client.indices.exists?(index: index))
        @esc.client.indices.delete(index: index)
      end
      @esc.client.indices.create(index: index)
      @esc.client.indices.close(index: index)
      @esc.client.indices.put_settings(
        index: index,
        body: JSON.parse(File.read(
          'elasticsearch/standard_index_settings.json'))
      )
      @esc.client.indices.put_mapping(
        index: index,
        type: 'doc',
        body: JSON.parse(File.read(
          'elasticsearch/standard_index_mapping.json'))
      )
      @esc.client.indices.open(index: index)
    end

    def execute()
      response = RestClient.get(
        @dataspects_api_url,
        headers = {
          "dataspects-api-key": @dataspects_api_key,
          content_type: :json,
          accept: :json
        }
      )
      resources = JSON.parse(response)
      resources.each do |resource|
        esdoc = {
          # Resource silo level
          OriginatedFromResourceSiloID: "",
          OriginatedFromResourceSiloLabel: "",
          OriginatedFromResourceSiloType: "",
          # Resource level
          OriginatedFromResourceName: resource['pagename'],
          OriginatedFromResourceURL: "",
          OriginatedFromResourceType: "",
          # Entity/subject level
          HasEntityClass: resource['hasEntityClass'],
          HasEntityName: resource['hasEntityName'],
          HasEntityType: resource['hasEntityType'],
          HasEntityURL: resource['hasEntityURL'],
          HasEntityTitle: resource['hasEntityTitle'],
          HasEntityBlurbTEXT: resource['hasEntityBlurbTEXT'],
          HasEntityBlurbHTML: resource['hasEntityBlurbHTML'],
          HasEntityContentTEXT: "",
          HasEntityContentHTML: resource['nonFormssemanticizedWikitextHtml'],
          HasEntityTypeAndEntityTitle: "#{resource['hasEntityType']} \"resource['hasEntityTitle']\"",
          HasEntityKeywords: resource['hasEntityKeywords'],
          HasEntityAnnotations: resource['annotations']
        }

        # EVERYTHING to Elasticsearch
        @esc.index(
          body: esdoc,
          index: "dataspectspublic"
        )

        # ANNOTATIONS as Annotations to MongoDB
        resource['annotations'].each do |annotation|
          # annotation = {
          #           "_id" => "5c8f6eb5500c843c92dcf0e7",
          #            "id" => "subob",
          #       "subject" => "C0174167973",
          #     "predicate" => "ConcernsAspect",
          #        "object" => "Curation#"
          # }

          subject = get(
            url: "http://localhost:3000/api/mediawikis/pages/"+annotation['subject']
          )
          predicate = get(
            url: "http://localhost:3000/api/predicates/"+annotation['predicate']
          )
          object = get(
            url: "http://localhost:3000/api/mediawikis/pages/"+annotation['object']
          )

          mongodoc = {
            id: "test",
            subject: annotation['subject'],
            subject_namespace: resource['mediaWiki']['namespace'],
            subject_class: "Entity|Subject", #
            subject_type: subject['hasEntityType'], #"Diagram|RubyGem" If annotation['subject'] exists in models:pagename then set to its hasEntityType
            predicate: annotation['predicate'],
            predicate_namespace: predicate['predicate_namespace'],
            predicate_class: predicate['predicate_class'], #"Property|ActiveAction|PassiveAction"
            predicate_type: predicate['predicate_type'], #"Text|Page|URL"
            object: annotation['object'],
            object_namespace: "literal", # If annotation['object'] exists in models:pagename then set to resource['mediaWiki']['namespace']
            object_class: "Entity|Subject|literal",
            object_type: object['hasEntityType'], #"Diagram|RubyGem|literal" If annotation['object'] exists in models:pagename then set to its hasEntityType
            context: "test"
          }
          post(
            url: "http://localhost:3000/api/annotations",
            body: mongodoc.to_json
          )
        end
      end
    end

  end
end

response = RestClient.get(
  "http://localhost:3000/api/mediawikis",
  headers = {
    "dataspects-api-key": "aslkdjasldkjlaskdj",
    content_type: :json,
    accept: :json
  }
)
mediawiki_id = JSON.parse(response.body)[0]["_id"]

# Run by "ruby index_cookbook_entities.rb"
$development_tika_url = "http://localhost:9998"
mwsi = Dataspects::CookbookFALnetIndexer.new(
  dataspects_api_url: "http://localhost:3000/api/mediawikis/#{mediawiki_id}/pages",
  dataspects_api_key: "aslkdjasldkjlaskdj",
  tika_url: $development_tika_url,
  es_url: "http://localhost:9200"
).execute
